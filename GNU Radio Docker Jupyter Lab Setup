# GNU Radio Jupyter Lab - Image Versioning System

## Overview

This setup allows you to maintain multiple Docker image versions without conflicts:
- **Default/Production**: Your stable, working version
- **Development**: For testing new features
- **Test**: For experiments
- **Custom**: Any name you want

## How It Works

The `gnuradio-lab.sh` script dynamically creates different image and container names based on the variant you specify:

```
gnuradio-jupyter         (default, port 8888)
gnuradio-jupyter-dev     (development, port 8889)
gnuradio-jupyter-test    (test, port 8890)
gnuradio-jupyter-mycustom (custom, port 8888)
```

## Basic Workflow

### 1. Keep Your Working Version Safe
```bash
# Your original working build (no variant specified)
./gnuradio-lab.sh build
./gnuradio-lab.sh start
# This creates: gnuradio-jupyter:latest
```

### 2. Create Development Version
```bash
# Build a development version for testing changes
./gnuradio-lab.sh build dev
./gnuradio-lab.sh start dev
# This creates: gnuradio-jupyter-dev:latest
# Runs on port 8889 to avoid conflicts
```

### 3. Work With Multiple Versions
```bash
# See all your versions
./gnuradio-lab.sh list

# Start specific version
./gnuradio-lab.sh start        # Default version
./gnuradio-lab.sh start dev    # Development version

# They can run simultaneously on different ports!
```

## File Structure

You only need ONE set of files:
```
gnu-radio-jupyter/
├── Dockerfile           # Single Dockerfile for all versions
├── docker-compose.yml   # Clean base configuration
├── gnuradio-lab.sh     # Smart script that handles variants
├── notebooks/          # Shared by all versions
├── flowgraphs/         # Shared by all versions
├── scripts/            # Shared by all versions
└── data/               # Shared by all versions
```

## Common Tasks

### Making Changes to Dockerfile
```bash
# Edit Dockerfile
nano Dockerfile

# Test changes in dev version
./gnuradio-lab.sh build dev
./gnuradio-lab.sh start dev

# If it works, rebuild default
./gnuradio-lab.sh build
```

### Cleaning Up Old Versions
```bash
# Remove specific version
./gnuradio-lab.sh clean dev

# See what you have
./gnuradio-lab.sh list
```

### Exporting for Distribution
```bash
# Export your production version
./gnuradio-lab.sh export

# Or export specific version
./gnuradio-lab.sh export dev

# Creates: gnuradio-jupyter-dev-20240315-143022.tar.gz
```

### Final Build for Distribution
When ready to distribute:
```bash
# On your VM for final build
./gnuradio-lab.sh build
./gnuradio-lab.sh export

# This creates a portable tar.gz file
# Upload to Docker Hub or your registry
```

## Port Assignments

To avoid conflicts when running multiple versions:
- **Default**: 8888
- **dev**: 8889  
- **test**: 8890
- **Other**: 8888 (make sure default isn't running)

## Behind the Scenes

The script creates a temporary `.docker-compose.override.yml` file that:
1. Sets the correct image name
2. Sets the correct container name
3. Maps the correct port
4. Cleans up after itself

This means:
- No file duplication
- No manual editing of docker-compose.yml
- No accidental overwrites of your working version
- Clean git commits (override file is temporary)

## Tips

1. **Always specify variant for non-production work**
   ```bash
   ./gnuradio-lab.sh build dev   # Safe!
   ./gnuradio-lab.sh build        # This overwrites production!
   ```

2. **Use meaningful variant names**
   ```bash
   ./gnuradio-lab.sh build fix-permissions
   ./gnuradio-lab.sh build add-opencv
   ./gnuradio-lab.sh build test-python311
   ```

3. **Check what's running**
   ```bash
   ./gnuradio-lab.sh list
   docker ps | grep gnuradio
   ```

4. **Notebooks are shared**
   - All versions use the same notebook directory
   - Great for testing the same notebook across versions
   - Be careful with version-specific dependencies

## Git/Version Control

Add to `.gitignore`:
```
.docker-compose.override.yml
*.tar.gz
```

Commit to git:
- `Dockerfile`
- `docker-compose.yml`
- `gnuradio-lab.sh`
- Example notebooks
- Documentation

Don't commit:
- Docker images (they're in Docker, not files)
- Override files (temporary)
- Export tar.gz files (too large)